name: Build .deb (Theos)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - '**/*.xm'
      - '**/*.m'
      - '**/*.mm'
      - '**/*.h'
      - 'tweak/**'
      - 'prefs/**'
      - 'debian/**'
      - 'Makefile'
      - '.github/workflows/build.yml'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      # ---- System deps (includes runtime libs the toolchain needs) ----
      - name: Install base deps
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y \
            build-essential fakeroot rsync curl perl unzip git xz-utils zstd \
            libplist-utils ca-certificates dpkg-dev git-lfs \
            libtinfo5 libncurses5

      - name: Install ldid (Procursus)
        run: |
          set -eux
          sudo curl -L -o /usr/local/bin/ldid \
            https://github.com/ProcursusTeam/ldid/releases/latest/download/ldid_linux_x86_64
          sudo chmod +x /usr/local/bin/ldid
          ldid -V || true

      # ---- THEOS in a fresh temp dir every run ----
      - name: Prepare THEOS dir (temp)
        run: |
          set -eux
          echo "THEOS=$RUNNER_TEMP/theos" >> $GITHUB_ENV
          rm -rf "$RUNNER_TEMP/theos"
          mkdir -p "$RUNNER_TEMP/theos"

      - name: Fetch Theos
        run: |
          set -eux
          git clone --recursive --depth=1 https://github.com/theos/theos "$THEOS"

      # ---- iOS cross-toolchain (linux â†’ iphoneos) ----
      - name: Fetch toolchain
        run: |
          set -eux
          mkdir -p "$THEOS/toolchain/linux/iphone"
          WORK="$RUNNER_TEMP/toolchain"
          rm -rf "$WORK" && mkdir -p "$WORK"
          curl -L -o "$WORK/toolchain.tar.lzma" \
            https://github.com/sbingner/llvm-project/releases/latest/download/linux-ios-arm64e-clang-toolchain.tar.lzma
          # Some runners don't support 'tar --lzma'; convert first
          xz --format=lzma -d "$WORK/toolchain.tar.lzma"
          tar -xf "$WORK/toolchain.tar" -C "$WORK"
          SRC_DIR="$(find "$WORK" -mindepth 1 -maxdepth 1 -type d | head -n 1)"
          if [ -z "$SRC_DIR" ]; then echo "Toolchain folder not found"; exit 1; fi
          rm -rf "$THEOS/toolchain/linux/iphone"/*
          cp -a "$SRC_DIR/"* "$THEOS/toolchain/linux/iphone/"
          # Make toolchain compilers available on PATH for make/theos
          echo "$THEOS/toolchain/linux/iphone/bin" >> $GITHUB_PATH

      # ---- iOS SDKs (via Git LFS) ----
      - name: Fetch iOS SDKs
        run: |
          set -eux
          git lfs install
          rm -rf "$THEOS/sdks"
          git clone --depth=1 https://github.com/theos/sdks.git "$THEOS/sdks"
          cd "$THEOS/sdks"
          git lfs pull
          ls -lah

    # ---- Pin iOS 14.x SDK (force; avoid 15+/16+/17+ header issues) ----
- name: Pin iOS 14.x SDK
  run: |
    set -eux
    # Remove newer SDKs so clang can't accidentally use them
    rm -rf "$THEOS/sdks/iPhoneOS16"*.sdk "$THEOS/sdks/iPhoneOS17"*.sdk "$THEOS/sdks/iPhoneOS15"*.sdk || true

    # Pick the best available 14.x (fallback to 13.x if needed)
    for ver in 14.5 14.4 14.2 14.0 13.7 13.0 12.5 12.0; do
      SDK="$THEOS/sdks/iPhoneOS${ver}.sdk"
      if [ -d "$SDK" ]; then
        echo "Using SDK: $SDK"
        {
          echo "THEOS_PLATFORM_SDK_ROOT=$SDK"
          echo "SDKROOT=$SDK"
          echo "SYSROOT=$SDK"
        } >> $GITHUB_ENV
        exit 0
      fi
    done

    echo "No 14.x/13.x/12.x SDK found. Available:"; ls -la "$THEOS/sdks"
    exit 1

      # ---- Find your tweak folder (first dir containing a Makefile) ----
      - name: Detect tweak directory
        id: detect
        run: |
          set -eux
          candidates=("tweak/W2Like" "tweak" "." "W2Like" "src" "package")
          for d in "${candidates[@]}"; do
            if [ -f "$d/Makefile" ]; then
              echo "TWEAK_DIR=$d" >> $GITHUB_ENV
              echo "Found Makefile in: $d"
              exit 0
            fi
          done
          echo "Could not find a Makefile. Repo contents:"
          find . -maxdepth 3 -type f -name Makefile -print || true
          ls -la
          exit 1

      # ---- Build (rootless) ----
      - name: Build .deb (rootless)
        working-directory: ${{ env.TWEAK_DIR }}
        run: |
          set -eux
          make clean
          make package
          ls -lah packages || true

      # ---- Upload artifact (.deb) ----
      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: w2like-deb
          path: ${{ env.TWEAK_DIR }}/packages/*.deb
